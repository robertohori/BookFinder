{"ast":null,"code":"import axios from \"axios\";\nimport { REQUEST_BOOKS, RECEIVE_BOOKS } from \"./actionTypes\";\nexport const requestBooks = query => ({\n  type: REQUEST_BOOKS,\n  query\n});\nexport const receiveBooks = ({\n  status,\n  payload\n}) => ({\n  type: RECEIVE_BOOKS,\n  status,\n  payload\n});\nexport const getBooks = ({\n  query,\n  sort,\n  qtdPage,\n  page\n}) => {\n  return function (dispatch) {\n    dispatch(requestBooks(query));\n    const url = `http://openlibrary.org/search.json?q=${query}${`&limit=10`}&page=${page ? page : 1}${sort === \"title_desc\" || sort === \"title_asc\" ? \"\" : sort ? `&sort=${sort}` : \"\"}`;\n    return axios.get(url).then(response => {\n      if (sort === \"title_asc\") {\n        response.data.docs.sort((a, b) => a.title.localeCompare(b.title));\n      } else if (sort === \"title_desc\") {\n        response.data.docs.sort((b, a) => a.title.localeCompare(b.title));\n      }\n\n      dispatch(receiveBooks({\n        status: \"success\",\n        payload: response.data\n      }));\n    }).catch(error => {\n      dispatch(receiveBooks({\n        status: \"error\",\n        payload: error\n      }));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/robertohori/Sites/bookfinder-app/src/screens/home/actions.js"],"names":["axios","REQUEST_BOOKS","RECEIVE_BOOKS","requestBooks","query","type","receiveBooks","status","payload","getBooks","sort","qtdPage","page","dispatch","url","get","then","response","data","docs","a","b","title","localeCompare","catch","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,eAA7C;AAEA,OAAO,MAAMC,YAAY,GAAIC,KAAD,KAAY;AACtCC,EAAAA,IAAI,EAAEJ,aADgC;AAEtCG,EAAAA;AAFsC,CAAZ,CAArB;AAKP,OAAO,MAAME,YAAY,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,MAA0B;AACpDH,EAAAA,IAAI,EAAEH,aAD8C;AAEpDK,EAAAA,MAFoD;AAGpDC,EAAAA;AAHoD,CAA1B,CAArB;AAMP,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAAEL,EAAAA,KAAF;AAASM,EAAAA,IAAT;AAAeC,EAAAA,OAAf;AAAwBC,EAAAA;AAAxB,CAAD,KAAoC;AAC1D,SAAO,UAAUC,QAAV,EAAoB;AACzBA,IAAAA,QAAQ,CAACV,YAAY,CAACC,KAAD,CAAb,CAAR;AAEA,UAAMU,GAAG,GAAI,wCAAuCV,KAAM,GAAG,WAAW,SACtEQ,IAAI,GAAGA,IAAH,GAAU,CACf,GACCF,IAAI,KAAK,YAAT,IAAyBA,IAAI,KAAK,WAAlC,GACI,EADJ,GAEIA,IAAI,GACH,SAAQA,IAAK,EADV,GAEJ,EACL,EARD;AASA,WAAOV,KAAK,CACTe,GADI,CACAD,GADA,EAEJE,IAFI,CAEEC,QAAD,IAAc;AAClB,UAAIP,IAAI,KAAK,WAAb,EAA0B;AACxBO,QAAAA,QAAQ,CAACC,IAAT,CAAcC,IAAd,CAAmBT,IAAnB,CAAwB,CAACU,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,KAAF,CAAQC,aAAR,CAAsBF,CAAC,CAACC,KAAxB,CAAlC;AACD,OAFD,MAEO,IAAIZ,IAAI,KAAK,YAAb,EAA2B;AAChCO,QAAAA,QAAQ,CAACC,IAAT,CAAcC,IAAd,CAAmBT,IAAnB,CAAwB,CAACW,CAAD,EAAID,CAAJ,KAAUA,CAAC,CAACE,KAAF,CAAQC,aAAR,CAAsBF,CAAC,CAACC,KAAxB,CAAlC;AACD;;AACDT,MAAAA,QAAQ,CACNP,YAAY,CAAC;AACXC,QAAAA,MAAM,EAAE,SADG;AAEXC,QAAAA,OAAO,EAAES,QAAQ,CAACC;AAFP,OAAD,CADN,CAAR;AAMD,KAdI,EAeJM,KAfI,CAeGC,KAAD,IAAW;AAChBZ,MAAAA,QAAQ,CACNP,YAAY,CAAC;AACXC,QAAAA,MAAM,EAAE,OADG;AAEXC,QAAAA,OAAO,EAAEiB;AAFE,OAAD,CADN,CAAR;AAMD,KAtBI,CAAP;AAuBD,GAnCD;AAoCD,CArCM","sourcesContent":["import axios from \"axios\";\nimport { REQUEST_BOOKS, RECEIVE_BOOKS } from \"./actionTypes\";\n\nexport const requestBooks = (query) => ({\n  type: REQUEST_BOOKS,\n  query,\n});\n\nexport const receiveBooks = ({ status, payload }) => ({\n  type: RECEIVE_BOOKS,\n  status,\n  payload,\n});\n\nexport const getBooks = ({ query, sort, qtdPage, page }) => {\n  return function (dispatch) {\n    dispatch(requestBooks(query));\n\n    const url = `http://openlibrary.org/search.json?q=${query}${`&limit=10`}&page=${\n      page ? page : 1\n    }${\n      sort === \"title_desc\" || sort === \"title_asc\"\n        ? \"\"\n        : sort\n        ? `&sort=${sort}`\n        : \"\"\n    }`;\n    return axios\n      .get(url)\n      .then((response) => {\n        if (sort === \"title_asc\") {\n          response.data.docs.sort((a, b) => a.title.localeCompare(b.title));\n        } else if (sort === \"title_desc\") {\n          response.data.docs.sort((b, a) => a.title.localeCompare(b.title));\n        }\n        dispatch(\n          receiveBooks({\n            status: \"success\",\n            payload: response.data,\n          })\n        );\n      })\n      .catch((error) => {\n        dispatch(\n          receiveBooks({\n            status: \"error\",\n            payload: error,\n          })\n        );\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}