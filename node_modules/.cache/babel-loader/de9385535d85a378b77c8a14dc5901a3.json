{"ast":null,"code":"var _jsxFileName = \"/Users/robertohori/Sites/bookfinder-app/src/components/Pagination.js\";\nimport React, { useState } from \"react\";\n\nconst PaginationComponent = ({\n  totalRegister,\n  callBackCurrentPage,\n  currentpage,\n  childFunc\n}) => {\n  React.useEffect(() => {\n    childFunc.current = updateCurrentPage;\n  }, []);\n\n  const updateCurrentPage = props => {\n    startPages(props.totalRegister);\n    setcurrentPage(props.page);\n  };\n\n  const [currentPage, setcurrentPage] = useState(currentpage);\n  const [itemsPerPage] = useState(10);\n  const [pageNumberLimit] = useState(5);\n  const [maxPageNumberLimit, setmaxPageNumberLimit] = useState(5);\n  const [minPageNumberLimit, setminPageNumberLimit] = useState(0); //const [pages, setPages] = useState([]);\n\n  const handleClick = event => {\n    setcurrentPage(Number(event.target.id));\n    callBackCurrentPage(Number(event.target.id));\n  };\n\n  const startPages = totalRegister => {\n    let pages = [];\n\n    for (let i = 1; i <= Math.ceil(totalRegister / itemsPerPage); i++) {\n      pages.push(i);\n    }\n\n    return pages;\n  };\n\n  let pages = startPages(totalRegister);\n  const renderPageNumbers = pages.map(number => {\n    if (number < maxPageNumberLimit + 1 && number > minPageNumberLimit) {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: number,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        \"aria-current\": currentPage === number,\n        id: number,\n        onClick: handleClick,\n        \"aria-label\": \"Page \" + number,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }\n      }, number));\n    } else {\n      return null;\n    }\n  });\n\n  const handleNextbtn = () => {\n    setcurrentPage(currentPage + 1);\n\n    if (currentPage + 1 > maxPageNumberLimit) {\n      setmaxPageNumberLimit(maxPageNumberLimit + pageNumberLimit);\n      setminPageNumberLimit(minPageNumberLimit + pageNumberLimit);\n    }\n\n    callBackCurrentPage(currentPage);\n  };\n\n  const handlePrevbtn = () => {\n    setcurrentPage(currentPage - 1);\n\n    if ((currentPage - 1) % pageNumberLimit === 0) {\n      setmaxPageNumberLimit(maxPageNumberLimit - pageNumberLimit);\n      setminPageNumberLimit(minPageNumberLimit - pageNumberLimit);\n    }\n\n    callBackCurrentPage(currentPage);\n  };\n\n  let pageIncrementBtn = null;\n\n  if (pages.length > maxPageNumberLimit) {\n    pageIncrementBtn = /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: handleNextbtn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, \"Next page\"));\n  }\n\n  let pageDecrementBtn = null;\n\n  if (currentPage > 1 && pages.length > 0) {\n    pageDecrementBtn = /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: handlePrevbtn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, \"Previous page\"));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"paginationControl\",\n    role: \"navigation\",\n    \"aria-label\": \"Pagination\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"pageNumbers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, pageDecrementBtn, renderPageNumbers, pageIncrementBtn)));\n};\n\nexport default PaginationComponent;","map":{"version":3,"sources":["/Users/robertohori/Sites/bookfinder-app/src/components/Pagination.js"],"names":["React","useState","PaginationComponent","totalRegister","callBackCurrentPage","currentpage","childFunc","useEffect","current","updateCurrentPage","props","startPages","setcurrentPage","page","currentPage","itemsPerPage","pageNumberLimit","maxPageNumberLimit","setmaxPageNumberLimit","minPageNumberLimit","setminPageNumberLimit","handleClick","event","Number","target","id","pages","i","Math","ceil","push","renderPageNumbers","map","number","handleNextbtn","handlePrevbtn","pageIncrementBtn","length","pageDecrementBtn"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nconst PaginationComponent = ({\n  totalRegister,\n  callBackCurrentPage,\n  currentpage,\n  childFunc,\n}) => {\n  React.useEffect(() => {\n    childFunc.current = updateCurrentPage;\n  }, []);\n\n  const updateCurrentPage = (props) => {\n    startPages(props.totalRegister);\n    setcurrentPage(props.page);\n  };\n\n  const [currentPage, setcurrentPage] = useState(currentpage);\n  const [itemsPerPage] = useState(10);\n  const [pageNumberLimit] = useState(5);\n  const [maxPageNumberLimit, setmaxPageNumberLimit] = useState(5);\n  const [minPageNumberLimit, setminPageNumberLimit] = useState(0);\n  //const [pages, setPages] = useState([]);\n  const handleClick = (event) => {\n    setcurrentPage(Number(event.target.id));\n    callBackCurrentPage(Number(event.target.id));\n  };\n  const startPages = (totalRegister) => {\n    let pages = [];\n    for (let i = 1; i <= Math.ceil(totalRegister / itemsPerPage); i++) {\n      pages.push(i);\n    }\n    return pages;\n  };\n  let pages = startPages(totalRegister);\n\n  const renderPageNumbers = pages.map((number) => {\n    if (number < maxPageNumberLimit + 1 && number > minPageNumberLimit) {\n      return (\n        <li key={number}>\n          <button\n            aria-current={currentPage === number}\n            id={number}\n            onClick={handleClick}\n            aria-label={\"Page \" + number}\n          >\n            {number}\n          </button>\n        </li>\n      );\n    } else {\n      return null;\n    }\n  });\n\n  const handleNextbtn = () => {\n    setcurrentPage(currentPage + 1);\n\n    if (currentPage + 1 > maxPageNumberLimit) {\n      setmaxPageNumberLimit(maxPageNumberLimit + pageNumberLimit);\n      setminPageNumberLimit(minPageNumberLimit + pageNumberLimit);\n    }\n    callBackCurrentPage(currentPage);\n  };\n\n  const handlePrevbtn = () => {\n    setcurrentPage(currentPage - 1);\n\n    if ((currentPage - 1) % pageNumberLimit === 0) {\n      setmaxPageNumberLimit(maxPageNumberLimit - pageNumberLimit);\n      setminPageNumberLimit(minPageNumberLimit - pageNumberLimit);\n    }\n    callBackCurrentPage(currentPage);\n  };\n\n  let pageIncrementBtn = null;\n  if (pages.length > maxPageNumberLimit) {\n    pageIncrementBtn = (\n      <li>\n        <button onClick={handleNextbtn}>Next page</button>\n      </li>\n    );\n  }\n\n  let pageDecrementBtn = null;\n  if (currentPage > 1 && pages.length > 0) {\n    pageDecrementBtn = (\n      <li>\n        <button onClick={handlePrevbtn}>Previous page</button>\n      </li>\n    );\n  }\n\n  return (\n    <>\n      <div id=\"paginationControl\" role=\"navigation\" aria-label=\"Pagination\">\n        <ul className=\"pageNumbers\">\n          {pageDecrementBtn}\n          {renderPageNumbers}\n          {pageIncrementBtn}\n        </ul>\n      </div>\n    </>\n  );\n};\n\nexport default PaginationComponent;\n"]},"metadata":{},"sourceType":"module"}